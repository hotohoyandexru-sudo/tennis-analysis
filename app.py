import streamlit as st
import re
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="üéæ Tennis Expert vs Market Analysis", 
    layout="wide",
    page_icon="üéæ"
)

st.title("üéæ Tennis Expert vs Market --- Full Analysis")
st.markdown("---")

OUTCOMES = ['2:0', '2:1', '1:2', '0:2']

def extract_matches(line):
    return re.findall(r'\d+-\([^)]+\)', line)

def parse_match_part(part):
    match = re.match(r'^(\d+)-\((.+)\)$', part.strip())
    if not match:
        return None, None
    num_str, outcome_str = match.groups()
    try:
        num = int(num_str)
        if 1 <= num <= 15:
            options = [o.strip() for o in outcome_str.split(',') if o.strip() in OUTCOMES]
            return num, options if options else None
        else:
            return None, None
    except:
        return None, None

def parse_odds(text):
    odds = {}
    lines = text.strip().split('\n')
    for line in lines:
        line = line.strip()
        if not line or '\t' not in line:
            continue
        parts = [p.strip() for p in line.split('\t') if p.strip()]
        if len(parts) < 3:
            continue
        try:
            match_num = int(parts[0])
            p1 = float(parts[1])
            p2 = float(parts[2])
            odds[match_num] = {'p1': p1, 'p2': p2}
        except:
            continue
    return odds

def analyze_data(expert_text):
    patterns = {
        'full_uncertainty': {i: 0 for i in range(1, 16)},
        'battle_3set': {i: 0 for i in range(1, 16)},
        'slight_advantage_away': {i: 0 for i in range(1, 16)},
        'close_fight': {i: 0 for i in range(1, 16)},
        'split_fav_vs_underdog': {i: 0 for i in range(1, 16)},
        'fav_with_battle': {i: 0 for i in range(1, 16)}
    }
    
    triple_patterns = {
        'triple_20_21_12': {i: 0 for i in range(1, 16)},
        'triple_20_21_02': {i: 0 for i in range(1, 16)},
        'triple_20_12_02': {i: 0 for i in range(1, 16)},
        'triple_21_12_02': {i: 0 for i in range(1, 16)}
    }
    
    match_totals = {i: {'2:0': 0, '2:1': 0, '1:2': 0, '0:2': 0} for i in range(1, 16)}
    total_experts = 0
    
    lines = expert_text.strip().split('\n')
    for line in lines:
        line = line.strip()
        if not line or line.startswith('#'):
            continue
            
        parts = extract_matches(line)
        if not parts:
            continue
            
        total_experts += 1
        
        for part in parts:
            match_num, options = parse_match_part(part)
            if match_num is None or options is None or match_num < 1 or match_num > 15:
                continue
                
            for outcome in options:
                if outcome in match_totals[match_num]:
                    match_totals[match_num][outcome] += 1
            
            s = set(options)
            if s == {'2:0', '2:1', '1:2', '0:2'}:
                patterns['full_uncertainty'][match_num] += 1
            elif s == {'1:2', '0:2'}:
                patterns['battle_3set'][match_num] += 1
            elif s == {'2:1', '0:2'}:
                patterns['slight_advantage_away'][match_num] += 1
            elif s == {'2:1', '1:2'}:
                patterns['close_fight'][match_num] += 1
            elif s == {'2:0', '0:2'}:
                patterns['split_fav_vs_underdog'][match_num] += 1
            elif s == {'2:0', '2:1'}:
                patterns['fav_with_battle'][match_num] += 1
            elif s == {'2:0', '2:1', '1:2'}:
                triple_patterns['triple_20_21_12'][match_num] += 1
            elif s == {'2:0', '2:1', '0:2'}:
                triple_patterns['triple_20_21_02'][match_num] += 1
            elif s == {'2:0', '1:2', '0:2'}:
                triple_patterns['triple_20_12_02'][match_num] += 1
            elif s == {'2:1', '1:2', '0:2'}:
                triple_patterns['triple_21_12_02'][match_num] += 1
    
    return patterns, triple_patterns, match_totals, total_experts

def find_value_bets(match_totals, odds_data):
    candidates = []
    min_votes = 10
    min_value = 1.15

    for match_num in range(1, 15):
        if match_num not in odds_data:
            continue
            
        totals = match_totals[match_num]
        total_votes = sum(totals.values())
        if total_votes == 0:
            continue

        bk = odds_data[match_num]
        implied_total = 1/bk['p1'] + 1/bk['p2']

        # === –ê–Ω–∞–ª–∏–∑ –ü1 ===
        p1_expert = (totals['2:0'] + totals['2:1']) / total_votes
        votes_p1 = totals['2:0'] + totals['2:1']
        fair_p1 = (1 / bk['p1']) / implied_total
        value_ratio_p1 = p1_expert / fair_p1

        if p1_expert > fair_p1 and value_ratio_p1 >= min_value and votes_p1 >= min_votes:
            candidates.append({
                'match': match_num,
                'side': '–ü1',
                'exp_prob': p1_expert,
                'fair_prob': fair_p1,
                'odd': bk['p1'],
                'value': value_ratio_p1,
                'votes': votes_p1,
                'total': total_votes
            })

        # === –ê–Ω–∞–ª–∏–∑ –ü2 ===
        p2_expert = (totals['1:2'] + totals['0:2']) / total_votes
        votes_p2 = totals['1:2'] + totals['0:2']
        fair_p2 = (1 / bk['p2']) / implied_total
        value_ratio_p2 = p2_expert / fair_p2

        if p2_expert > fair_p2 and value_ratio_p2 >= min_value and votes_p2 >= min_votes:
            candidates.append({
                'match': match_num,
                'side': '–ü2',
                'exp_prob': p2_expert,
                'fair_prob': fair_p2,
                'odd': bk['p2'],
                'value': value_ratio_p2,
                'votes': votes_p2,
                'total': total_votes
            })

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ value ratio (–ª—É—á—à–∏–µ ‚Äî –ø–µ—Ä–≤—ã–µ)
    candidates.sort(key=lambda x: x['value'], reverse=True)
    return candidates

def format_output(patterns, triple_patterns, match_totals, total_experts, odds_data):
    output = io.StringIO()
    output.write(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤: {total_experts}\n\n")

    # === –ü–∞—Ç—Ç–µ—Ä–Ω—ã (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ===
    pattern_list = [
        ('full_uncertainty', "üî¥ –ü–û–õ–ù–ê–Ø –ù–ï–û–ü–†–ï–î–ï–õ–Å–ù–ù–û–°–¢–¨: -(2:0,2:1,1:2,0:2)"),
        ('battle_3set', "üü† –ë–û–†–¨–ë–ê, –í–û–ó–ú–û–ñ–ï–ù –¢–†–ï–¢–ò–ô –°–ï–¢: -(1:2,0:2)"),
        ('slight_advantage_away', "üü° –ù–ï–ë–û–õ–¨–®–û–ï –ü–†–ï–ò–ú–£–©–ï–°–¢–í–û –í–¢–û–†–û–ú–£: -(2:1,0:2)"),
        ('close_fight', "üü¢ –†–ê–í–ù–´–ï –®–ê–ù–°–´: -(2:1,1:2)"),
        ('split_fav_vs_underdog', "üü£ –ß–Å–¢–ö–ò–ô –†–ê–ó–ë–†–û–°: -(2:0,0:2)"),
        ('fav_with_battle', "üîµ –£–í–ï–†–ï–ù–ù–û–°–¢–¨ –í –§–ê–í–û–†–ò–¢–ï, –ù–û –° –ë–û–†–¨–ë–û–ô: -(2:0,2:1)")
    ]

    for key, title in pattern_list:
        output.write(f"{title}\n")
        output.write("=" * 80 + "\n")
        found = False
        for m in range(1, 15):
            cnt = patterns[key][m]
            if cnt > 0:
                output.write(f"–ú–∞—Ç—á {m}: {cnt} —ç–∫—Å–ø–µ—Ä—Ç{'–æ–≤' if cnt != 1 else ''}\n")
                found = True
        if not found:
            output.write("–ù–µ –Ω–∞–π–¥–µ–Ω–æ.\n")
        output.write("\n")

    # === –¢—Ä–æ–π–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ ===
    triples_map = [
        (triple_patterns['triple_20_21_12'], 'üîπ –§–∞–≤–æ—Ä–∏—Ç, –Ω–æ —Å —Ä–∏—Å–∫–æ–º: -(2:0,2:1,1:2)'),
        (triple_patterns['triple_20_21_02'], 'üîπ –§–∞–≤–æ—Ä–∏—Ç –º–æ–∂–µ—Ç –ø—Ä–æ–∏–≥—Ä–∞—Ç—å: -(2:0,2:1,0:2)'),
        (triple_patterns['triple_20_12_02'], 'üîπ –§–∞–≤–æ—Ä–∏—Ç: –ª—ë–≥–∫–∞—è –ø–æ–±–µ–¥–∞ –∏–ª–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ: -(2:0,1:2,0:2)'),
        (triple_patterns['triple_21_12_02'], 'üîπ –ê—É—Ç—Å–∞–π–¥–µ—Ä –º–æ–∂–µ—Ç –ø–æ–±–µ–¥–∏—Ç—å –ª—é–±—ã–º —Å–ø–æ—Å–æ–±–æ–º: -(2:1,1:2,0:2)')
    ]
    
    for data, title in triples_map:
        output.write(f"{title}\n")
        output.write("=" * 80 + "\n")
        found = False
        for m in range(1, 15):
            cnt = data[m]
            if cnt > 0:
                output.write(f"–ú–∞—Ç—á {m}: {cnt} —ç–∫—Å–ø–µ—Ä—Ç{'–æ–≤' if cnt != 1 else ''}\n")
                found = True
        if not found:
            output.write("–ù–µ –Ω–∞–π–¥–µ–Ω–æ.\n")
        output.write("\n")

    # === –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ ===
    output.write("üî¢ –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–†–û–ì–ù–û–ó–û–í –ü–û –ö–ê–ñ–î–û–ú–£ –ú–ê–¢–ß–£ (1--14)\n")
    output.write("=" * 80 + "\n")
    header = f"{'‚Ññ':<3} {'2:0':<6} {'2:1':<6} {'1:2':<6} {'0:2':<6} {'Œ£':<6}"
    output.write(header + "\n")
    output.write("-" * 80 + "\n")
    for m in range(1, 15):
        t = match_totals[m]
        total = sum(t.values())
        if total > 0:
            line = f"{m:<3} {t['2:0']:<6} {t['2:1']:<6} {t['1:2']:<6} {t['0:2']:<6} {total:<6}"
            output.write(line + "\n")
    output.write("\n")

    # === –û–°–ù–û–í–ù–û–ô –í–´–í–û–î: –¢–û–ü-6 –í–ê–õ–£–ô–ù–´–• –°–¢–ê–í–û–ö (–ü1 –∏ –ü2) ===
    if not odds_data:
        output.write("‚ö†Ô∏è –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã --- –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–ø—É—â–µ–Ω.\n\n")
    else:
        candidates = find_value_bets(match_totals, odds_data)
        output.write("üèÜ –¢–û–ü-6: –õ–£–ß–®–ò–ï –í–ê–õ–£–ô–ù–´–ï –°–¢–ê–í–ö–ò (–ü1 –∏ –ü2)\n")
        output.write("=" * 80 + "\n")
        
        if not candidates:
            output.write("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –≤–∞–ª—É–π–Ω–æ–π —Å—Ç–∞–≤–∫–∏.\n\n")
        else:
            for i, c in enumerate(candidates[:6], 1):
                output.write(f"{i}. –ú–ê–¢–ß {c['match']} ‚Üí –°–¢–ê–í–ö–ê –ù–ê {c['side']}:\n")
                output.write(f" üìä –ü–æ–¥–¥–µ—Ä–∂–∫–∞: {c['votes']}/{c['total']} ({c['exp_prob']:.1%})\n")
                output.write(f" üìà –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {c['odd']} ‚Üí –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç {c['fair_prob']:.1%}\n")
                output.write(f" üéØ Value ratio: {c['value']:.2f}x\n\n")

    return output.getvalue()

# === –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å ===
col1, col2 = st.columns([1, 1])

with col1:
    st.subheader("üîπ –ü—Ä–æ–≥–Ω–æ–∑—ã —ç–∫—Å–ø–µ—Ä—Ç–æ–≤")
    st.caption("–§–æ—Ä–º–∞—Ç: 1-(2:0); 2-(1:2,0:2); ...")
    expert_text = st.text_area(
        "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑—ã:", 
        height=200,
        placeholder="1-(2:0,2:1)\n2-(1:2,0:2)\n3-(2:0)\n4-(0:2)"
    )

with col2:
    st.subheader("üîπ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã")
    st.caption("–§–æ—Ä–º–∞—Ç: 1\\t1.65\\t2.24")
    odds_text = st.text_area(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã:", 
        height=200,
        placeholder="1\t1.65\t2.24\n2\t1.85\t2.00"
    )

if st.button("üöÄ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", type="primary", use_container_width=True):
    if not expert_text.strip():
        st.error("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑—ã —ç–∫—Å–ø–µ—Ä—Ç–æ–≤!")
    else:
        with st.spinner("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ..."):
            patterns, triple_patterns, match_totals, total_experts = analyze_data(expert_text)
            odds_data = parse_odds(odds_text)
            result_text = format_output(patterns, triple_patterns, match_totals, total_experts, odds_data)
            
            st.success(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤: {total_experts}")
            st.subheader("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
            st.text_area("–†–µ–∑—É–ª—å—Ç–∞—Ç:", value=result_text, height=600, key="results")
            
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç",
                data=result_text,
                file_name="tennis_analysis_report.txt",
                mime="text/plain"
            )

# === –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ===
st.sidebar.title("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
st.sidebar.markdown("""
### –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
1. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑—ã —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ (—Å–ª–µ–≤–∞)
2. –í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ **—Ç–∞–±—É–ª—è—Ü–∏—é** (—Å–ø—Ä–∞–≤–∞)
3. –ù–∞–∂–º–∏—Ç–µ **¬´–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å¬ª**
4. –ü–æ–ª—É—á–∏—Ç–µ **–¢–û–ü-6 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π** —Å —á—ë—Ç–∫–∏–º —É–∫–∞–∑–∞–Ω–∏–µ–º: **–ü1 –∏–ª–∏ –ü2**

üí° –ê–ª–≥–æ—Ä–∏—Ç–º –∏—â–µ—Ç **—Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –º–µ–∂–¥—É —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏ –∏ —Ä—ã–Ω–∫–æ–º** ‚Äî –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç **–Ω–∞–∏–±–æ–ª–µ–µ –Ω–µ–¥–æ–æ—Ü–µ–Ω—ë–Ω–Ω—ã–µ –∏—Å—Ö–æ–¥—ã**.
""")

import streamlit as st
import re
import pandas as pd
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="üéæ Tennis Expert vs Market Analysis", 
    layout="wide",
    page_icon="üéæ"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("üéæ Tennis Expert vs Market --- Full Analysis")
st.markdown("---")

OUTCOMES = ['2:0', '2:1', '1:2', '0:2']

def extract_matches(line):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –≤–∏–¥–∞ '1-(...)'"""
    return re.findall(r'\d+-\([^)]+\)', line)

def parse_match_part(part):
    """–ü–∞—Ä—Å–∏—Ç '1-(2:0,1:2)' ‚Üí (–Ω–æ–º–µ—Ä_–º–∞—Ç—á–∞, ['2:0', '1:2'])"""
    match = re.match(r'^(\d+)-\((.+)\)$', part.strip())
    if not match:
        return None, None
    num_str, outcome_str = match.groups()
    try:
        num = int(num_str)
        if 1 <= num <= 15:
            options = [o.strip() for o in outcome_str.split(',') if o.strip() in OUTCOMES]
            return num, options if options else None
        else:
            return None, None
    except:
        return None, None

def parse_odds(text):
    """–ü–∞—Ä—Å–∏—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: '1\t1.65\t2.24' ‚Üí {1: {'p1': 1.65, 'p2': 2.24}}"""
    odds = {}
    lines = text.strip().split('\n')
    for line in lines:
        line = line.strip()
        if not line or '\t' not in line:
            continue
        parts = [p.strip() for p in line.split('\t') if p.strip()]
        if len(parts) < 3:
            continue
        try:
            match_num = int(parts[0])
            p1 = float(parts[1])
            p2 = float(parts[2])
            odds[match_num] = {'p1': p1, 'p2': p2}
        except:
            continue
    return odds

def analyze_data(expert_text):
    # –ü–æ–¥—Å—á—ë—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    patterns = {
        'full_uncertainty': {i: 0 for i in range(1, 16)},
        'battle_3set': {i: 0 for i in range(1, 16)},
        'slight_advantage_away': {i: 0 for i in range(1, 16)},
        'close_fight': {i: 0 for i in range(1, 16)},
        'split_fav_vs_underdog': {i: 0 for i in range(1, 16)},
        'fav_with_battle': {i: 0 for i in range(1, 16)}
    }
    
    triple_patterns = {
        'triple_20_21_12': {i: 0 for i in range(1, 16)},
        'triple_20_21_02': {i: 0 for i in range(1, 16)},
        'triple_20_12_02': {i: 0 for i in range(1, 16)},
        'triple_21_12_02': {i: 0 for i in range(1, 16)}
    }
    
    match_totals = {i: {'2:0': 0, '2:1': 0, '1:2': 0, '0:2': 0} for i in range(1, 16)}
    total_experts = 0
    
    lines = expert_text.strip().split('\n')
    for line in lines:
        line = line.strip()
        if not line or line.startswith('#'):
            continue
            
        parts = extract_matches(line)
        if not parts:
            continue
            
        total_experts += 1
        
        for part in parts:
            match_num, options = parse_match_part(part)
            if match_num is None or options is None or match_num < 1 or match_num > 15:
                continue
                
            for outcome in options:
                if outcome in match_totals[match_num]:
                    match_totals[match_num][outcome] += 1
            
            s = set(options)
            if s == {'2:0', '2:1', '1:2', '0:2'}:
                patterns['full_uncertainty'][match_num] += 1
            elif s == {'1:2', '0:2'}:
                patterns['battle_3set'][match_num] += 1
            elif s == {'2:1', '0:2'}:
                patterns['slight_advantage_away'][match_num] += 1
            elif s == {'2:1', '1:2'}:
                patterns['close_fight'][match_num] += 1
            elif s == {'2:0', '0:2'}:
                patterns['split_fav_vs_underdog'][match_num] += 1
            elif s == {'2:0', '2:1'}:
                patterns['fav_with_battle'][match_num] += 1
            elif s == {'2:0', '2:1', '1:2'}:
                triple_patterns['triple_20_21_12'][match_num] += 1
            elif s == {'2:0', '2:1', '0:2'}:
                triple_patterns['triple_20_21_02'][match_num] += 1
            elif s == {'2:0', '1:2', '0:2'}:
                triple_patterns['triple_20_12_02'][match_num] += 1
            elif s == {'2:1', '1:2', '0:2'}:
                triple_patterns['triple_21_12_02'][match_num] += 1
    
    return patterns, triple_patterns, match_totals, total_experts

def show_pattern_streamlit(data, title):
    """–ê–Ω–∞–ª–æ–≥ show_pattern –¥–ª—è Streamlit"""
    st.subheader(title)
    found_matches = []
    for m in range(1, 15):
        cnt = data[m]
        if cnt > 0:
            found_matches.append(f"–ú–∞—Ç—á {m}: {cnt} —ç–∫—Å–ø–µ—Ä—Ç{'–æ–≤' if cnt != 1 else ''}")
    
    if found_matches:
        for match_info in found_matches:
            st.write(match_info)
    else:
        st.write("–ù–µ –Ω–∞–π–¥–µ–Ω–æ.")
    st.write("")

def show_distribution_streamlit(match_totals):
    """–ê–Ω–∞–ª–æ–≥ show_distribution –¥–ª—è Streamlit"""
    st.subheader("üî¢ –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–†–û–ì–ù–û–ó–û–í –ü–û –ö–ê–ñ–î–û–ú–£ –ú–ê–¢–ß–£ (1-14)")
    
    dist_data = []
    for m in range(1, 15):
        t = match_totals[m]
        total = sum(t.values())
        if total > 0:
            dist_data.append({
                '–ú–∞—Ç—á': m,
                '2:0': t['2:0'],
                '2:1': t['2:1'],
                '1:2': t['1:2'],
                '0:2': t['0:2'],
                '–í—Å–µ–≥–æ': total
            })
    
    if dist_data:
        df = pd.DataFrame(dist_data)
        st.dataframe(df, use_container_width=True)
    else:
        st.info("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    st.write("")

def show_value_bets_streamlit(match_totals, odds_data):
    """–ê–Ω–∞–ª–æ–≥ show_value_bets –¥–ª—è Streamlit"""
    candidates = []
    for match_num in range(1, 15):
        if match_num not in odds_data:
            continue
            
        totals = match_totals[match_num]
        total_votes = sum(totals.values())
        if total_votes == 0:
            continue
            
        p2_expert = (totals['1:2'] + totals['0:2']) / total_votes
        votes_p2 = totals['1:2'] + totals['0:2']
        
        bk = odds_data[match_num]
        implied_total = 1/bk['p1'] + 1/bk['p2']
        fair_p2 = (1 / bk['p2']) / implied_total
        
        value_ratio = p2_expert / fair_p2
        
        min_votes = 10
        min_value = 1.15
        
        if p2_expert > fair_p2 and value_ratio >= min_value and votes_p2 >= min_votes:
            candidates.append({
                '–ú–∞—Ç—á': match_num,
                '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ü2': f"{p2_expert:.1%}",
                '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ü2': bk['p2'],
                '–ü–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ–º–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å': f"{fair_p2:.1%}",
                'Value ratio': f"{value_ratio:.2f}x",
                '–ì–æ–ª–æ—Å–æ–≤ –∑–∞ –ü2': votes_p2,
                '–í—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤': total_votes
            })
    
    candidates.sort(key=lambda x: float(x['Value ratio'].replace('x', '')), reverse=True)
    
    st.subheader("üèÜ –¢–û–ü-6: –°–¢–ê–í–ö–ò –ü–†–û–¢–ò–í –†–´–ù–ö–ê (—ç–∫—Å–ø–µ—Ä—Ç—ã > —Ä—ã–Ω–æ–∫)")
    
    if not candidates:
        st.info("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Å—Ç–∞–≤–∫–∏ –ø—Ä–æ—Ç–∏–≤ —Ä—ã–Ω–∫–∞.")
    else:
        df = pd.DataFrame(candidates[:6])
        st.dataframe(df, use_container_width=True)
    st.write("")

def show_contrarian_bets_streamlit(match_totals, odds_data):
    """–ê–Ω–∞–ª–æ–≥ show_contrarian_bets –¥–ª—è Streamlit"""
    candidates = []
    for match_num in range(1, 15):
        if match_num not in odds_data:
            continue
            
        totals = match_totals[match_num]
        total_votes = sum(totals.values())
        if total_votes == 0:
            continue
            
        p1_expert = (totals['2:0'] + totals['2:1']) / total_votes
        p2_expert = (totals['1:2'] + totals['0:2']) / total_votes
        
        bk = odds_data[match_num]
        implied_total = 1/bk['p1'] + 1/bk['p2']
        fair_p2 = (1 / bk['p2']) / implied_total
        
        if p1_expert > 0.70 and fair_p2 > 0.45 and fair_p2 > p2_expert * 1.1:
            candidates.append({
                '–ú–∞—Ç—á': match_num,
                '–≠–∫—Å–ø–µ—Ä—Ç—ã –∑–∞ –ü1': f"{p1_expert:.1%}",
                '–†—ã–Ω–æ–∫ –∑–∞ –ü2': f"{fair_p2:.1%}",
                '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ü2': bk['p2'],
                '–†–∞–∑–Ω–∏—Ü–∞': f"{fair_p2 - p2_expert:+.1%}",
                '–í—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤': total_votes
            })
    
    candidates.sort(key=lambda x: float(x['–†–∞–∑–Ω–∏—Ü–∞'].replace('%', '').replace('+', '')), reverse=True)
    
    st.subheader("üõ°Ô∏è –¢–û–ü-3: –°–¢–ê–í–ö–ò –ü–†–û–¢–ò–í –≠–ö–°–ü–ï–†–¢–û–í, –ù–û –ü–û –†–´–ù–ö–£")
    
    if not candidates:
        st.info("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–ª—É—á–∞—è –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∏ —Ñ–∞–≤–æ—Ä–∏—Ç–∞.")
    else:
        df = pd.DataFrame(candidates[:3])
        st.dataframe(df, use_container_width=True)
    st.write("")

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
col1, col2 = st.columns([1, 1])

with col1:
    st.subheader("üîπ –ü—Ä–æ–≥–Ω–æ–∑—ã —ç–∫—Å–ø–µ—Ä—Ç–æ–≤")
    st.caption("–§–æ—Ä–º–∞—Ç: 1-(2:0); 2-(1:2,0:2); ...")
    expert_text = st.text_area(
        "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑—ã:", 
        height=200,
        placeholder="1-(2:0,2:1)\n2-(1:2,0:2)\n3-(2:0)\n4-(0:2)\n5-(2:0)"
    )

with col2:
    st.subheader("üîπ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã")
    st.caption("–§–æ—Ä–º–∞—Ç: 1\\t1.65\\t2.24")
    odds_text = st.text_area(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã:", 
        height=200,
        placeholder="1\t1.65\t2.24\n2\t1.85\t2.00\n3\t1.70\t2.15"
    )

# –ö–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
if st.button("üöÄ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", type="primary", use_container_width=True):
    if not expert_text.strip():
        st.error("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑—ã —ç–∫—Å–ø–µ—Ä—Ç–æ–≤!")
    else:
        with st.spinner("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ..."):
            patterns, triple_patterns, match_totals, total_experts = analyze_data(expert_text)
            odds_data = parse_odds(odds_text)
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            st.success(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤: {total_experts}")
            
            # üî¥ –ü–æ–ª–Ω–∞—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ—Å—Ç—å
            show_pattern_streamlit(patterns['full_uncertainty'], "üî¥ –ü–û–õ–ù–ê–Ø –ù–ï–û–ü–†–ï–î–ï–õ–Å–ù–ù–û–°–¢–¨: -(2:0,2:1,1:2,0:2)")
            
            # üü† –ë–æ—Ä—å–±–∞, –≤–æ–∑–º–æ–∂–µ–Ω —Ç—Ä–µ—Ç–∏–π —Å–µ—Ç
            show_pattern_streamlit(patterns['battle_3set'], "üü† –ë–û–†–¨–ë–ê, –í–û–ó–ú–û–ñ–ï–ù –¢–†–ï–¢–ò–ô –°–ï–¢: -(1:2,0:2)")
            
            # üü° –ù–µ–±–æ–ª—å—à–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –≤—Ç–æ—Ä–æ–º—É
            show_pattern_streamlit(patterns['slight_advantage_away'], "üü° –ù–ï–ë–û–õ–¨–®–û–ï –ü–†–ï–ò–ú–£–©–ï–°–¢–í–û –í–¢–û–†–û–ú–£: -(2:1,0:2)")
            
            # üü¢ –†–∞–≤–Ω—ã–µ —à–∞–Ω—Å—ã
            show_pattern_streamlit(patterns['close_fight'], "üü¢ –†–ê–í–ù–´–ï –®–ê–ù–°–´: -(2:1,1:2)")
            
            # üü£ –ß—ë—Ç–∫–∏–π —Ä–∞–∑–±—Ä–æ—Å
            show_pattern_streamlit(patterns['split_fav_vs_underdog'], "üü£ –ß–Å–¢–ö–ò–ô –†–ê–ó–ë–†–û–°: -(2:0,0:2)")
            
            # üîµ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ñ–∞–≤–æ—Ä–∏—Ç–µ, –Ω–æ —Å –±–æ—Ä—å–±–æ–π
            show_pattern_streamlit(patterns['fav_with_battle'], "üîµ –£–í–ï–†–ï–ù–ù–û–°–¢–¨ –í –§–ê–í–û–†–ò–¢–ï, –ù–û –° –ë–û–†–¨–ë–û–ô: -(2:0,2:1)")
            
            # üîπ –¢—Ä–æ–π–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
            triples_map = [
                (triple_patterns['triple_20_21_12'], 'üîπ –§–∞–≤–æ—Ä–∏—Ç, –Ω–æ —Å —Ä–∏—Å–∫–æ–º: -(2:0,2:1,1:2)'),
                (triple_patterns['triple_20_21_02'], 'üîπ –§–∞–≤–æ—Ä–∏—Ç –º–æ–∂–µ—Ç –ø—Ä–æ–∏–≥—Ä–∞—Ç—å: -(2:0,2:1,0:2)'),
                (triple_patterns['triple_20_12_02'], 'üîπ –§–∞–≤–æ—Ä–∏—Ç: –ª—ë–≥–∫–∞—è –ø–æ–±–µ–¥–∞ –∏–ª–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ: -(2:0,1:2,0:2)'),
                (triple_patterns['triple_21_12_02'], 'üîπ –ê—É—Ç—Å–∞–π–¥–µ—Ä –º–æ–∂–µ—Ç –ø–æ–±–µ–¥–∏—Ç—å –ª—é–±—ã–º —Å–ø–æ—Å–æ–±–æ–º: -(2:1,1:2,0:2)')
            ]
            
            for data, title in triples_map:
                show_pattern_streamlit(data, title)
            
            # üî¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
            show_distribution_streamlit(match_totals)
            
            if not odds_data:
                st.warning("‚ö†Ô∏è –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã --- –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–ø—É—â–µ–Ω.")
            else:
                # üèÜ Value —Å—Ç–∞–≤–∫–∏
                show_value_bets_streamlit(match_totals, odds_data)
                
                # üõ°Ô∏è –ö–æ–Ω—Ç—Ä-—Å—Ç–∞–≤–∫–∏
                show_contrarian_bets_streamlit(match_totals, odds_data)

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
st.sidebar.title("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
st.sidebar.markdown("""
### –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:

1. **–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑—ã** –≤ –ª–µ–≤–æ–º –ø–æ–ª–µ: